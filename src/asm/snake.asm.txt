/*
	// Ekvivalentan C kod:
	short* p_food_and_snake = &a_food_and_snake;
	short frames_cnt = 0;
	short frames_per_heartbeat = 75; // 75 for synth, 1 for sim.
	short* p_rgb_matrix = 0x100;
	short* p_frame_sync = 0x140;
	short* p_pb_dec = 0x200;
	typedef struct {
		short x;
		short y
	} chunk_t;
	chunk_t a_food_and_snake[67] = {
		{6, 2}, // Food.
		{2, 4}, // Head.
		{2, 3},
		{2, 2},
		{2, 1},
		{1, 1}, // Tail.
		{-1, -1},
	};

*/

; SNAKE GAME LPRS1
; Ivan Novakovic		IN33/2021
; Helena Djordjevic		IN42/2021
; Anastasija Terzic		IN44/2021
; Ognjen Stancevic		IN53/2021

; - Upgrades:
;   walls
;   death if eating its own body
;   food randomization
; 	reset button
; 	game reset by pressing the button


.data
8
0
75
0x100
0x140
0x200
6515	; value for random x coordinate
4209	; value for random y coordinate
3, 4
2, 4
2, 3
2, 2
2, 1
1, 1
-1, -1

.text
/*
	Registers:
	R0 - tmp register
	R1 - tmp chunk x
	R2 - tmp chunk y
	R3 - color
	R4 - p_food_and_snake
	R5 - p_pb_dec
	R6 - p_frame_sync
	R7 - p_rgb_matrix
*/

begin:
	;; Setup pointers and color.
	sub R0, R0, R0
	inc R0, R0                  ;; addr = 1
	inc R0, R0                  ;; addr = 2
	inc R0, R0                  ;; addr = 3
	ld R7, R0                   ;; R7 <- p_rgb_matrix
	inc R0, R0                  ;; addr = 4
	ld R6, R0                   ;; R6 <- p_frame_sync
	inc R0, R0                  ;; addr = 5
	ld R5, R0                   ;; R5 <- p_pb_dec
	inc R3, R3                  ;; color = RED\

	sub R0, R0, R0

	;jmp kraj

frame_sync_rising_edge:
frame_sync_wait_0:
	ld R0, R6                   ;; R0 <- p_frame_sync
	jmpnz frame_sync_wait_0
frame_sync_wait_1:
	ld R0, R6                   ;; R0 <- p_frame_sync
	jmpz frame_sync_wait_1

;;---------------------------------------
;; WALLS
check_top_left:			
	sub R0, R0, R0		; R0 = 0
	ld R4, R0			
	inc R4, R4
	inc R4, R4			; R4 -> snakeHead X
	ld R1, R4
	jmps kraj			; out of bounds-left (X < 0)
	
	inc R4, R4			; R4 -> snakeHead Y
	ld R2, R4
	jmps kraj			; out of bounds-up (Y < 0)
	
	inc R4, R4
	

check_bottom_right:		
	sub R0,R0,R0		; R0 = 0
	ld R4,R0
	inc R4,R4
	inc R4,R4			; R4 -> snakeHead X
	ld R1,R4			; R1 = snakeHead X
	inc R4,R4			; R4 -> snakeHead Y
	ld R2,R4			; R2 = snakeHead Y
	dec R4,R4

	inc R0,R0
	inc R0,R0
	inc R0,R0
	inc R0,R0
	inc R0,R0
	inc R0,R0
	inc R0,R0			; R0 = 7

	sub R1,R0,R1
	jmps kraj			; out of bounds-down
	
	sub R2,R0,R2
	jmps kraj			; out of bounds-right

;;---------------------------------------
;; Eating thyself check
rep:
    sub R0, R0, R0		; R0 = 0
    ld R4, R0
    inc R4, R4
    inc R4, R4			; R4 -> snakeHead X
    ld R1, R4
    inc R4, R4			; R4 -> snakeHead Y
    ld R2, R4
    inc R4, R4			; R4 -> first tail X

rep_loop:
	;; is_end_tail ?
    ld R0, R4
    jmps dalje          ; end of tail if -1

	;;check if tail[x] & head[x] are same
    sub R0, R0, R1
    jmpnz nije_jedan    ;not same x

	;; check if tail[y] & head[y] are same
    inc R4, R4
    ld R0, R4
    sub R0, R0, R2
    jmpnz nije_dva       ; not same y

    jmp kraj          			


nije_jedan:
    inc R4, R4
nije_dva:
    inc R4, R4
    jmp rep_loop

dalje:

;;---------------------------------------

draw_snake_begin:
	;; color is RED at this point.
	sub R0, R0, R0              ;; addr = 0
	ld R4, R0                   ;; R4 <- p_food_and_snake
	shl R3, R3                  ;; color = GREEN;
	shl R3, R3                  ;; color = BLUE;
draw_snake_loop:
	ld R1, R4                   ;; R1 <- p_food_and_snake->x
	jmps draw_snake_end 		;; Jump to end if passed tail of snake.
	inc R4, R4
	ld R2, R4                   ;; R2 <- p_food_and_snake->y
	inc R4, R4                  ;; Move p_food_and_snake
	;; p_rgb_matrix + (y << 3) + x
	shl R2, R2
	shl R2, R2
	shl R2, R2
	add R2, R1, R2              ;; (y << 3) + x
	add R2, R7, R2              ;; p_rgb_matrix + 
	st R3, R2                   ;; R3 -> p_rgb_matrix[y][x]
	shr R3, R3                  ;; BLUE -> GREEN -> RED -> BLACK
	jmpnz draw_snake_loop
	inc R3, R3                  ;; if BLACK return to RED.
	jmp draw_snake_loop
draw_snake_end:

count_frames_begin:
	sub R0, R0, R0              ;; addr = 0
	inc R0, R0
	ld R1, R0                   ;; R1 <- frame_cntinc R0, R0
	inc R0, R0
	ld R2, R0                   ;; R2 <- frames_per_heartbeat
	dec R0, R0
	inc R1, R1                  ;; frame_cnt++;
	sub R2, R2, R1              ;; frame_cnt == frames_per_heartbeat
	jmpz count_frames_heatbeat  ;; Jump if equal.
	st R1, R0                   ;; R1 -> frame_cnt
	jmp frame_sync_rising_edge
count_frames_heatbeat:
	sub R1, R1, R1
	st R1, R0                   ;; R1 i.e. 0 -> frame_cnt
	;; Move snake, eat food...
count_frames_end:

move_snake_begin:
	sub R0, R0, R0              ;; addr = 0
	ld R4, R0                   ;; R4 <- p_food_and_snake
	;; R4 points to food.
	inc R4, R4
	inc R4, R4
	;; R4 points to head.
	ld R1, R4                   ;; R1 <- p_food_and_snake->x
	ld R0, R5                   ;; R0 <- p_pb_dec->x
	inc R5, R5                  ;; Move to p_pb_dec->y
	add R0, R0, R1              ;; Moving x by controls.
	st R0, R4                   ;; R0 -> p_food_and_snake->x
	inc R4, R4                  ;; Go to p_food_and_snake->y.
	ld R2, R4                   ;; R2 <- p_food_and_snake->y
	ld R0, R5                   ;; R0 <- p_pb_dec->y
	dec R5, R5                  ;; Return to p_pb_dec->x
	add R0, R0, R2              ;; Moving y by controls.
	st R0, R4                   ;; R0 -> p_food_and_snake->y
	inc R4, R4                  ;; p_food_and_snake++; Next chunk.
move_snake_loop:
	ld R0, R4                   ;; R0 <- p_food_and_snake->x
	jmps move_snake_end         ;; Jump to end if passed tail of snake.
	st R1, R4                   ;; prev chunk x -> p_food_and_snake->x
	mov R1, R0                  ;; Current x is now prev x.
	inc R4, R4                  ;; Go to p_food_and_snake->y.
	ld R0, R4                   ;; R0 <- p_food_and_snake->y
	st R2, R4                   ;; prev chunk y -> p_food_and_snake->y
	mov R2, R0                  ;; Current y is now prev y.
	inc R4, R4                  ;; p_food_and_snake++; Next chunk.
	jmp move_snake_loop
move_snake_end:

eating_food_begin:
	;; R4 points after tail.
	inc R4, R4
	inc R4, R4
	;; R4 points to backup.
	;; Backup tail prev pos for tail growth.
	st R1, R4                   ;; tail prev x -> backup x
	inc R4, R4
	st R2, R4                   ;; tail prev y -> backup y
	;; Check if snake ate food.
	sub R0, R0, R0              ;; addr = 0
	ld R4, R0                   ;; R4 <- p_food_and_snake
	;; R4 points to food.
	ld R1, R4                   ;; R1 <- food x
	inc R4, R4
	ld R2, R4                   ;; R2 <- food y
	inc R4, R4
	;; R4 points to head.
	ld R0, R4                   ;; R0 <- head x
	sub R0, R0, R1              ;; Check if head and food x match.
	jmpnz eating_food_end       ;; Food not eaten.
	inc R4, R4                  ;; Move to head y.
	ld R0, R4                   ;; R0 <- head y
	sub R0, R0, R2              ;; Check if head and food y match.
	jmpnz eating_food_end       ;; Food not eaten.
	;; New food.
	dec R4, R4
	;; R4 points to head.
	ld R0, R4                   ;; R0 <- head x
	dec R4, R4
	;; R4 points to food y.
	sub R2, R2, R0              ;; Moving food y.
	;; Making mask.
	sub R0, R0, R0
	inc R0, R0
	shl R0, R0
	inc R0, R0
	shl R0, R0
	inc R0, R0
	and R2, R2, R0              ;; Masking food y to be [0,8)
	st R2, R4                   ;; R2 -> food y
	dec R4, R4
	;; R4 points to food x.
	sub R1, R1, R2              ;; Moving food x.
	and R1, R1, R0              ;; Masking food x to be [0,8)
	st R1, R4                   ;; R1 -> food x
eating_food_tail_loop:
	inc R4, R4
	ld R0, R4                   ;; R0 <- p_food_and_snake->x
	jmpns eating_food_tail_loop ;; Jump until find after tail -1.
	;; R0 has -1.
	inc R4, R4
	inc R4, R4
	;; R4 points to backup.
	ld R1, R4                   ;; R1 <- backup x
	st R0, R4                   ;; -1 -> backup x i.e. new after tail.
	inc R4, R4
	ld R2, R4                   ;; R2 <- backup y
	st R0, R4                   ;; -1 -> backup y i.e. new after tail.
	dec R4, R4
	;; R4 points to backup.
	dec R4, R4
	st R2, R4                   ;; backup y -> after tail i.e. new tail.
	dec R4, R4
	;; R4 points to after tail e.i. new tail.
	st R1, R4                   ;; backup x -> after tail i.e. new tail.
eating_food_end:

	inc R0, R0

jmp frame_sync_rising_edge

;;------------------------------------
;; GAME END
kraj:

	sub R0, R0, R0			; R0 = 0
	mov R6, R0				; R6 = 0 randomization seed

kraj_loop:

;;----------------------------------------
	sub R0, R0, R0			; R0 = 0

	mov R3, R0       
	inc R3,R3				; RED

	sub R0, R0, R0			; R0 = 0

	mov R1, R0
	mov R2, R0

	st R0, R4
	inc R4, R4
	st R0, R4

;; Write on matrix
reset:
	sub R0, R0, R0			; R0 = 0


	;; write sequence
	shl R2, R2
	shl R2, R2
	shl R2, R2
	add R2, R1, R2
	add R2, R7, R2
	st R3, R2		



	sub R0, R0, R0
	ld R4, R0
	ld R1, R4
	inc R4, R4
	ld R2, R4


	inc R1, R1				; X++
	
	dec R4, R4
	st R1, R4

	sub R0, R0, R0

	inc R0, R0
	inc R0, R0
	inc R0, R0
	inc R0, R0
	inc R0, R0
	inc R0, R0
	inc R0, R0				; R0 = 7

	sub R0, R0, R1
	jmpns reset				; out of bounds right(x)

	;; Dosao je do kraja po X -> prelazi na sledeci red

	inc R2, R2				; Y++
	sub R0, R0, R0
	mov R1, R0

	st R1, R4
	inc R4, R4
	st R2, R4
	dec R4, R4

	inc R0, R0
	inc R0, R0
	inc R0, R0
	inc R0, R0
	inc R0, R0
	inc R0, R0
	inc R0, R0				; R0 = 7

	sub R0, R0, R2
	jmpns reset				; out of bounds right(y)


	;; check if game is reset
	sub R0, R0, R0
	inc R5, R5
	inc R5, R5				; R5 -> RST button
	ld R1, R5
	dec R5, R5
	dec R5, R5
	sub R0, R1, R0
	jmpnz new_begin			;RST pressed ?
	
	inc R6, R6				; R6++
jmp kraj_loop

new_begin:
	;; FOOD RANDOMIZATION

	sub R0, R0, R0			; R0 = 0
	inc R0, R0
	inc R0, R0
	inc R0, R0
	inc R0, R0
	inc R0, R0
	inc R0, R0				; R0 = 6

	ld R1, R0				; R1 = konstanta na lokaciji sa R0
	add R1, R6, R1			; R1 = R1 + seed
	inc R0, R0				; R0 = 7
	and R1, R1, R0			; Koriscenje R0 kao maske za R1 
	
	ld R2, R0				; R2 = konstanta na lokaciji sa R0
	add R2, R6, R2			; R2 = R2 + seed
	and R2, R2, R0			; Koriscnje R0 kao maske za R2	
	
	sub R0, R0, R0
	ld R4, R0
	st R1, R4				; R4[0] = food random X 
	inc R4, R4
	st R2, R4				; R4[1] = food random Y 
	
	;;-------------------
	; snake values after restart

	sub R0, R0, R0			; R0 = 0
	ld R4, R0
	inc R4, R4
	inc R4, R4				; R4 -> snakeHead X

	inc R0, R0
	inc R0, R0
	st R0, R4				; R4[2] = 2
	inc R4, R4

	inc R0, R0
	inc R0, R0
	st R0, R4				; R4[3] = 4
	inc R4, R4

	dec R0, R0
	dec R0, R0
	st R0, R4				; R4[4] = 2
	inc R4, R4

	inc R0, R0
	st R0, R4				; R4[5] = 3
	inc R4, R4

	dec R0, R0
	st R0, R4				; R4[6] = 2
	inc R4, R4

	st R0, R4				; R4[7] = 2
	inc R4, R4

	dec R0, R0
	dec R0, R0
	dec R0, R0				; R0 = -1
	st R0, R4				; R4[8] = -1
	inc R4, R4

	st R0, R4				; R4[9] = -1
	inc R4, R4
	
	sub R0, R0, R0
	inc R0, R0
	inc R0, R0
	inc R0, R0
	inc R0, R0
	ld R6, R0				
	
	jmp begin				